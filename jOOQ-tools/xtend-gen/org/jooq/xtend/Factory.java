package org.jooq.xtend;

import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.IntegerRange;
import org.jooq.Constants;
import org.jooq.xtend.Generators;

@SuppressWarnings("all")
public class Factory extends Generators {
  public static void main(final String[] args) {
    Factory _factory = new Factory();
    final Factory factory = _factory;
    factory.generateSelect();
    factory.generateSelectDistinct();
    factory.generateRowValue();
    factory.generateRowField();
  }
  
  public void generateSelect() {
    StringBuilder _stringBuilder = new StringBuilder();
    final StringBuilder out = _stringBuilder;
    IntegerRange _upTo = new IntegerRange(1, Constants.MAX_ROW_DEGREE);
    for (final Integer degree : _upTo) {
      {
        String fieldOrRow = ("Row" + degree);
        boolean _equals = ((degree).intValue() == 1);
        if (_equals) {
          fieldOrRow = "Field";
        }
        StringConcatenation _builder = new StringConcatenation();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Create a new DSL subselect statement.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* This is the same as {@link #select(Field...)}, except that it declares");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* additional record-level typesafety, which is needed by");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* {@link ");
        _builder.append(fieldOrRow, "     ");
        _builder.append("#in(Select)}, {@link ");
        _builder.append(fieldOrRow, "     ");
        _builder.append("#equal(Select)} and other predicate");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("* building methods taking subselect arguments.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Unlike {@link Select} factory methods in the {@link Executor} API, this");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* creates an unattached, and thus not directly renderable or executable");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code>SELECT</code> statement. You can use this statement in two ways:");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <ul>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <li>As a subselect within another select</li>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <li>As a statement, after attaching it using");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* {@link Select#attach(org.jooq.Configuration)}</li>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* </ul>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Example: <code><pre>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* import static org.jooq.impl.Factory.*;");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* // [...]");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* select(");
        String _field1_field2_fieldn = this.field1_field2_fieldn((degree).intValue());
        _builder.append(_field1_field2_fieldn, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*  .from(table1)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*  .join(table2).on(field1.equal(field2))");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*  .where(field1.greaterThan(100))");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*  .orderBy(field2);");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* </pre></code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see Executor#select(Field...)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #select(Field...)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        CharSequence _generatedMethod = this.generatedMethod();
        _builder.append(_generatedMethod, "    ");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public static <");
        String _TN = this.TN((degree).intValue());
        _builder.append(_TN, "    ");
        _builder.append("> SelectSelectStep<Record");
        _builder.append(degree, "    ");
        _builder.append("<");
        String _TN_1 = this.TN((degree).intValue());
        _builder.append(_TN_1, "    ");
        _builder.append(">> select(");
        String _Field_TN_fieldn = this.Field_TN_fieldn((degree).intValue());
        _builder.append(_Field_TN_fieldn, "    ");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        _builder.append("return (SelectSelectStep) select(new Field[] { ");
        String _fieldn = this.fieldn((degree).intValue());
        _builder.append(_fieldn, "        ");
        _builder.append(" });");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        out.append(_builder.toString());
      }
    }
    this.insert("org.jooq.impl.Factory", out, "select");
  }
  
  public void generateSelectDistinct() {
    StringBuilder _stringBuilder = new StringBuilder();
    final StringBuilder out = _stringBuilder;
    IntegerRange _upTo = new IntegerRange(1, Constants.MAX_ROW_DEGREE);
    for (final Integer degree : _upTo) {
      {
        String fieldOrRow = ("Row" + degree);
        boolean _equals = ((degree).intValue() == 1);
        if (_equals) {
          fieldOrRow = "Field";
        }
        StringConcatenation _builder = new StringConcatenation();
        _builder.newLine();
        _builder.append("    ");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Create a new DSL subselect statement.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* This is the same as {@link #selectDistinct(Field...)}, except that it");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* declares additional record-level typesafety, which is needed by");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* {@link ");
        _builder.append(fieldOrRow, "     ");
        _builder.append("#in(Select)}, {@link ");
        _builder.append(fieldOrRow, "     ");
        _builder.append("#equal(Select)} and other predicate");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("* building methods taking subselect arguments.");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Unlike {@link Select} factory methods in the {@link Executor} API, this");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* creates an unattached, and thus not directly renderable or executable");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <code>SELECT</code> statement. You can use this statement in two ways:");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <ul>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <li>As a subselect within another select</li>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <li>As a statement, after attaching it using");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* {@link Select#attach(org.jooq.Configuration)}</li>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* </ul>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* <p>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* Example: <code><pre>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* import static org.jooq.impl.Factory.*;");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* // [...]");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* selectDistinct(");
        String _field1_field2_fieldn = this.field1_field2_fieldn((degree).intValue());
        _builder.append(_field1_field2_fieldn, "     ");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        _builder.append("     ");
        _builder.append("*  .from(table1)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*  .join(table2).on(field1.equal(field2))");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*  .where(field1.greaterThan(100))");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*  .orderBy(field2);");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* </pre></code>");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see Executor#selectDistinct(Field...)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("* @see #selectDistinct(Field...)");
        _builder.newLine();
        _builder.append("     ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("    ");
        CharSequence _generatedMethod = this.generatedMethod();
        _builder.append(_generatedMethod, "    ");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("@Support");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("public static <");
        String _TN = this.TN((degree).intValue());
        _builder.append(_TN, "    ");
        _builder.append("> SelectSelectStep<Record");
        _builder.append(degree, "    ");
        _builder.append("<");
        String _TN_1 = this.TN((degree).intValue());
        _builder.append(_TN_1, "    ");
        _builder.append(">> selectDistinct(");
        String _Field_TN_fieldn = this.Field_TN_fieldn((degree).intValue());
        _builder.append(_Field_TN_fieldn, "    ");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("        ");
        _builder.append("return (SelectSelectStep) selectDistinct(new Field[] { ");
        String _fieldn = this.fieldn((degree).intValue());
        _builder.append(_fieldn, "        ");
        _builder.append(" });");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        out.append(_builder.toString());
      }
    }
    this.insert("org.jooq.impl.Factory", out, "selectDistinct");
  }
  
  public void generateRowValue() {
    StringBuilder _stringBuilder = new StringBuilder();
    final StringBuilder out = _stringBuilder;
    IntegerRange _upTo = new IntegerRange(1, Constants.MAX_ROW_DEGREE);
    for (final Integer degree : _upTo) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("* Create a row value expression of degree <code>");
      _builder.append(degree, "     ");
      _builder.append("</code>");
      _builder.newLineIfNotEmpty();
      _builder.append("     ");
      _builder.append("* <p>");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("* Note: Not all databases support row value expressions, but many row value");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("* expression operations can be simulated on all databases. See relevant row");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("* value expression method Javadocs for details.");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("    ");
      CharSequence _generatedMethod = this.generatedMethod();
      _builder.append(_generatedMethod, "    ");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      _builder.append("@Support");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("public static <");
      String _TN = this.TN((degree).intValue());
      _builder.append(_TN, "    ");
      _builder.append("> Row");
      _builder.append(degree, "    ");
      _builder.append("<");
      String _TN_1 = this.TN((degree).intValue());
      _builder.append(_TN_1, "    ");
      _builder.append("> row(");
      String _TN_tn = this.TN_tn((degree).intValue());
      _builder.append(_TN_tn, "    ");
      _builder.append(") {");
      _builder.newLineIfNotEmpty();
      _builder.append("        ");
      _builder.append("return row(");
      String _val_tn = this.val_tn((degree).intValue());
      _builder.append(_val_tn, "        ");
      _builder.append(");");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      out.append(_builder.toString());
    }
    this.insert("org.jooq.impl.Factory", out, "row-value");
  }
  
  public void generateRowField() {
    StringBuilder _stringBuilder = new StringBuilder();
    final StringBuilder out = _stringBuilder;
    IntegerRange _upTo = new IntegerRange(1, Constants.MAX_ROW_DEGREE);
    for (final Integer degree : _upTo) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("* Create a row value expression of degree <code>");
      _builder.append(degree, "     ");
      _builder.append("</code>");
      _builder.newLineIfNotEmpty();
      _builder.append("     ");
      _builder.append("* <p>");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("* Note: Not all databases support row value expressions, but many row value");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("* expression operations can be simulated on all databases. See relevant row");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("* value expression method Javadocs for details.");
      _builder.newLine();
      _builder.append("     ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("    ");
      CharSequence _generatedMethod = this.generatedMethod();
      _builder.append(_generatedMethod, "    ");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      _builder.append("@Support");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("public static <");
      String _TN = this.TN((degree).intValue());
      _builder.append(_TN, "    ");
      _builder.append("> Row");
      _builder.append(degree, "    ");
      _builder.append("<");
      String _TN_1 = this.TN((degree).intValue());
      _builder.append(_TN_1, "    ");
      _builder.append("> row(");
      String _Field_TN_tn = this.Field_TN_tn((degree).intValue());
      _builder.append(_Field_TN_tn, "    ");
      _builder.append(") {");
      _builder.newLineIfNotEmpty();
      _builder.append("        ");
      _builder.append("return new RowImpl(");
      String _tn = this.tn((degree).intValue());
      _builder.append(_tn, "        ");
      _builder.append(");");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      out.append(_builder.toString());
    }
    this.insert("org.jooq.impl.Factory", out, "row-field");
  }
}
